{"ast":null,"code":"var _jsxFileName = \"/Users/mayaesar/Documents/concordia-bootcamps/Projects/project-GROUP-e-commerce/client/src/components/cart/Qty.js\",\n    _s = $RefreshSig$();\n\nimport styled from \"styled-components\";\nimport { useState, useEffect, useContext } from \"react\";\nimport { UserActionContext } from \"../UserActionContext\";\nimport { UserContext } from \"../UserContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Qty = _ref => {\n  _s();\n\n  let {\n    item\n  } = _ref;\n  const {\n    updateQty,\n    cartDetails\n  } = useContext(UserActionContext);\n  const {\n    cart\n  } = useContext(UserContext);\n  const [quantity, setQuantity] = useState(null);\n  const [initialQty, setInitialQty] = useState(null);\n  useEffect(() => {\n    if (cart && item) {\n      setInitialQty(cart.find(ele => ele._id === item._id).qty);\n    }\n  }, [cartDetails]); // To create drop-down list for QTY. Max. num is 10 or numInStock whichever is greater. \n\n  const maxNum = item.numInStock >= 11 ? 11 : item.numInStock;\n  let arrNum = [];\n\n  for (let i = 1; i < maxNum; i++) {\n    arrNum.push(i);\n  } // When quantity is updated, updateQty function is called to update the cart/database\n\n\n  useEffect(() => {\n    if (quantity) {\n      const price = parseFloat(item.price.replace('$', ''));\n      const updatedItem = {\n        _id: item._id,\n        qty: parseInt(quantity),\n        totalPrice: quantity * price\n      };\n      updateQty(updatedItem);\n    }\n  }, [quantity]);\n  return /*#__PURE__*/_jsxDEV(Quantity, {\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Qty: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"qty\",\n      id: \"qty\",\n      value: quantity ? quantity : initialQty,\n      onChange: e => setQuantity(e.target.value),\n      children: arrNum.map(num => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: num,\n        children: num\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 32\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Qty, \"ZYfWLlu9Qb0DqhbnjkdVBNSip0M=\");\n\n_c = Qty;\nexport default Qty;\nconst Quantity = styled.div`\n    width: 100px;\n    display: inline-flex\n    \n    span{\n        \n    }\n`;\n_c2 = Quantity;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Qty\");\n$RefreshReg$(_c2, \"Quantity\");","map":{"version":3,"sources":["/Users/mayaesar/Documents/concordia-bootcamps/Projects/project-GROUP-e-commerce/client/src/components/cart/Qty.js"],"names":["styled","useState","useEffect","useContext","UserActionContext","UserContext","Qty","item","updateQty","cartDetails","cart","quantity","setQuantity","initialQty","setInitialQty","find","ele","_id","qty","maxNum","numInStock","arrNum","i","push","price","parseFloat","replace","updatedItem","parseInt","totalPrice","e","target","value","map","num","Quantity","div"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,mBAAnB;AACA,SAASC,QAAT,EAAmBC,SAAnB,EAA8BC,UAA9B,QAAgD,OAAhD;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AACA,SAASC,WAAT,QAA4B,gBAA5B;;;AAEA,MAAMC,GAAG,GAAG,QAAY;AAAA;;AAAA,MAAX;AAACC,IAAAA;AAAD,GAAW;AACpB,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA6BN,UAAU,CAACC,iBAAD,CAA7C;AACA,QAAM;AAACM,IAAAA;AAAD,MAASP,UAAU,CAACE,WAAD,CAAzB;AACA,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACY,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,IAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGQ,IAAI,IAAIH,IAAX,EAAiB;AACbO,MAAAA,aAAa,CAACJ,IAAI,CAACK,IAAL,CAAUC,GAAG,IAAIA,GAAG,CAACC,GAAJ,KAAYV,IAAI,CAACU,GAAlC,EAAuCC,GAAxC,CAAb;AACH;AACJ,GAJQ,EAIN,CAACT,WAAD,CAJM,CAAT,CANoB,CAapB;;AACA,QAAMU,MAAM,GAAGZ,IAAI,CAACa,UAAL,IAAmB,EAAnB,GAAuB,EAAvB,GAA4Bb,IAAI,CAACa,UAAhD;AACA,MAAIC,MAAM,GAAG,EAAb;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAApB,EAA4BG,CAAC,EAA7B,EAAgC;AAC5BD,IAAAA,MAAM,CAACE,IAAP,CAAYD,CAAZ;AACH,GAlBmB,CAoBpB;;;AACApB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGS,QAAH,EAAa;AACb,YAAMa,KAAK,GAAGC,UAAU,CAAClB,IAAI,CAACiB,KAAL,CAAWE,OAAX,CAAmB,GAAnB,EAAwB,EAAxB,CAAD,CAAxB;AACA,YAAMC,WAAW,GAAG;AAACV,QAAAA,GAAG,EAAEV,IAAI,CAACU,GAAX;AAAgBC,QAAAA,GAAG,EAAEU,QAAQ,CAACjB,QAAD,CAA7B;AAAyCkB,QAAAA,UAAU,EAAElB,QAAQ,GAACa;AAA9D,OAApB;AACAhB,MAAAA,SAAS,CAACmB,WAAD,CAAT;AACC;AACJ,GANQ,EAMN,CAAChB,QAAD,CANM,CAAT;AAQA,sBACI,QAAC,QAAD;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAQ,MAAA,IAAI,EAAC,KAAb;AACQ,MAAA,EAAE,EAAC,KADX;AAEQ,MAAA,KAAK,EAAEA,QAAQ,GAAEA,QAAF,GAAaE,UAFpC;AAGQ,MAAA,QAAQ,EAAGiB,CAAD,IAAOlB,WAAW,CAACkB,CAAC,CAACC,MAAF,CAASC,KAAV,CAHpC;AAAA,gBAKCX,MAAM,CAACY,GAAP,CAAWC,GAAG,iBAAI;AAAQ,QAAA,KAAK,EAAEA,GAAf;AAAA,kBAAqBA;AAArB;AAAA;AAAA;AAAA;AAAA,cAAlB;AALD;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH,CAzCD;;GAAM5B,G;;KAAAA,G;AA2CN,eAAeA,GAAf;AAEA,MAAM6B,QAAQ,GAAGnC,MAAM,CAACoC,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;MAAMD,Q","sourcesContent":["import styled from \"styled-components\";\nimport { useState, useEffect, useContext } from \"react\";\nimport { UserActionContext } from \"../UserActionContext\";\nimport { UserContext } from \"../UserContext\";\n\nconst Qty = ({item}) => {\n    const { updateQty, cartDetails } = useContext(UserActionContext);\n    const {cart} = useContext(UserContext);\n    const [quantity, setQuantity] = useState(null)\n    const [initialQty, setInitialQty] = useState(null)\n\n    useEffect(() => {\n        if(cart && item) {\n            setInitialQty(cart.find(ele => ele._id === item._id).qty)\n        }\n    }, [cartDetails])\n\n\n    // To create drop-down list for QTY. Max. num is 10 or numInStock whichever is greater. \n    const maxNum = item.numInStock >= 11? 11 : item.numInStock\n    let arrNum = []\n    for (let i = 1; i < maxNum; i++){\n        arrNum.push(i)\n    }\n    \n    // When quantity is updated, updateQty function is called to update the cart/database\n    useEffect(() => {\n        if(quantity) {\n        const price = parseFloat(item.price.replace('$', ''))\n        const updatedItem = {_id: item._id, qty: parseInt(quantity), totalPrice: quantity*price}\n        updateQty(updatedItem)\n        }\n    }, [quantity])\n\n    return (\n        <Quantity>\n            <span>Qty: </span>\n            <select name='qty' \n                    id='qty' \n                    value={quantity? quantity : initialQty} \n                    onChange={(e) => setQuantity(e.target.value)\n                    }>\n            {arrNum.map(num => <option value={num}>{num}</option>)}\n            </select>\n        </Quantity>\n    )\n}\n\nexport default Qty;\n\nconst Quantity = styled.div`\n    width: 100px;\n    display: inline-flex\n    \n    span{\n        \n    }\n`"]},"metadata":{},"sourceType":"module"}