{"ast":null,"code":"var _jsxFileName = \"/Users/mayaesar/Documents/concordia-bootcamps/Projects/project-GROUP-e-commerce/client/src/components/UserActionContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useContext } from \"react\";\nimport { UserContext } from \"./UserContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserActionContext = /*#__PURE__*/createContext(null);\nexport const UserActionProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const {\n    cart,\n    setCart,\n    wishlist,\n    setWishlist,\n    setIsErr,\n    setIsItemsUpdated,\n    isErr,\n    userId\n  } = useContext(UserContext);\n  const [cartDetails, setCartDetails] = useState(null);\n  const [wishlistDetails, setWishlistDetails] = useState(null); ///////////////////////// We are working change the logic not to do this second fetch to display items in cart and wishlist\n  ///////////////////////// Leave this block until we confirm the site is fully functional with another method. \n  // To get item details of cart or wishlist\n  // This function takes two parameters to update the state\n  //  - arrName : cart or wishlist\n  //  - setDetails : cartDetails or wishlistDetails\n  // const getItemDetails = (arrName, setDetails) => {\n  //     const items = arrName.map(item => item._id)\n  //     const promises = [];\n  //     items.forEach(item => {\n  //         promises.push(\n  //             fetch(`/api/get-item/${item}`)\n  //             .then(res => res.json())\n  //             .then(data => data.data)\n  //         )\n  //     })\n  //     Promise.all(promises).then((result) => setDetails(result))\n  // }\n  /////////////////////////\n  // To update cart and/or wishlist\n\n  const updateUserData = async obj => {\n    obj['_id'] = userId; // obj['_id'] = '460d7e55-fab0-48de-9c07-f61b222bfab6';   // <==== This will be removed before submission.  \n\n    try {\n      const res = await fetch('/api/update-user', {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify(obj)\n      });\n      const data = await res.json();\n      console.log(data); // To get updated cart and wishlist\n\n      if (data.status !== 200) return setIsErr(true);\n      data.data.cart && setCart(data.data.cart);\n      data.data.wishList && setWishlist(data.data.wishList);\n    } catch (err) {\n      setIsErr(true);\n    } finally {\n      !isErr && setIsItemsUpdated(true);\n    }\n  }; // To add an item to cart\n  // This function is passed to Wishlist and ProductDetails component\n\n\n  const addItem = item => {\n    console.log('ADD TO CART');\n    console.log({\n      cart\n    });\n    setIsItemsUpdated(false);\n    updateUserData({\n      item\n    });\n  };\n\n  let updatedCart = []; // To update qty\n\n  const updateQty = item => {\n    console.log('UPDATE QTY');\n    console.log({\n      item\n    });\n    setIsItemsUpdated(false);\n    const index = cart.findIndex(obj => obj._id === item._id);\n    console.log(index);\n    cart.splice(index, 1, item);\n    console.log(\"updated\", cart);\n    updateUserData({\n      cart: [cart]\n    });\n  }; // To delete an item from cart\n\n\n  const deleteItem = item => {\n    console.log('DELETE ITEM');\n    console.log({\n      item\n    });\n    setIsItemsUpdated(false);\n    updatedCart = cart.filter(obj => obj._id !== item._id);\n    updateUserData({\n      cart: updatedCart\n    });\n  }; // To add an item to wishlist and delete it from cart\n\n\n  const saveForLater = item => {\n    console.log('SAVE FOR LATER');\n    console.log({\n      item\n    });\n    setIsItemsUpdated(false);\n    console.log(cart);\n    const itemAddMovetoWishList = cart.find(obj => obj._id !== item._id);\n    updatedCart = cart.filter(obj => obj._id !== item._id);\n    updateUserData({\n      cart: updatedCart,\n      wishlist: [...wishlist, itemAddMovetoWishList]\n    });\n  }; // To add an item to wishlist\n\n\n  const addToWishlist = item => {\n    console.log('ADD TO WISHLIST');\n    console.log({\n      item\n    });\n    console.log(wishlist);\n    setIsItemsUpdated(false);\n    updateUserData({\n      wishList: [...wishlist, item]\n    });\n  };\n\n  let updatedWishlist = []; // To delete an item from wishlist\n\n  const deleteFromWishlist = item => {\n    console.log('DELETE FROM WISHLIST');\n    console.log({\n      item\n    });\n    setIsItemsUpdated(false);\n    updatedWishlist = wishlist.filter(obj => obj._id !== item._id);\n    updateUserData({\n      wishlist: updatedWishlist\n    });\n  }; // To add an item to cart and remove it from wishlist\n\n\n  const moveToCart = item => {\n    console.log('MOVE TO CART');\n    console.log({\n      item\n    });\n    setIsItemsUpdated(false);\n    updatedWishlist = wishlist.filter(obj => obj._id !== item._id);\n    updateUserData({\n      cart: [...cart, item],\n      wishlist: updatedWishlist\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(UserActionContext.Provider, {\n    value: {\n      deleteItem,\n      addItem,\n      updateQty,\n      saveForLater,\n      addToWishlist,\n      deleteFromWishlist,\n      moveToCart,\n      // getItemDetails,\n      cart,\n      cartDetails,\n      setCartDetails,\n      wishlist,\n      wishlistDetails,\n      setWishlistDetails\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UserActionProvider, \"frvTa7X9XKLd/sNiIZ8smKpBsSk=\");\n\n_c = UserActionProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserActionProvider\");","map":{"version":3,"sources":["/Users/mayaesar/Documents/concordia-bootcamps/Projects/project-GROUP-e-commerce/client/src/components/UserActionContext.js"],"names":["createContext","useState","useContext","UserContext","UserActionContext","UserActionProvider","children","cart","setCart","wishlist","setWishlist","setIsErr","setIsItemsUpdated","isErr","userId","cartDetails","setCartDetails","wishlistDetails","setWishlistDetails","updateUserData","obj","res","fetch","method","headers","body","JSON","stringify","data","json","console","log","status","wishList","err","addItem","item","updatedCart","updateQty","index","findIndex","_id","splice","deleteItem","filter","saveForLater","itemAddMovetoWishList","find","addToWishlist","updatedWishlist","deleteFromWishlist","moveToCart"],"mappings":"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","sourcesContent":["import { createContext, useState, useContext } from \"react\";\nimport { UserContext } from \"./UserContext\";\n\nexport const UserActionContext = createContext(null);\n\nexport const UserActionProvider = ({ children }) => {\n    const { cart, \n            setCart, \n            wishlist, \n            setWishlist, \n            setIsErr, \n            setIsItemsUpdated,\n            isErr,\n            userId,\n            } \n            = useContext(UserContext);\n    const [cartDetails, setCartDetails] = useState(null);\n    const [wishlistDetails, setWishlistDetails] = useState(null);\n\n    ///////////////////////// We are working change the logic not to do this second fetch to display items in cart and wishlist\n    ///////////////////////// Leave this block until we confirm the site is fully functional with another method. \n    // To get item details of cart or wishlist\n    // This function takes two parameters to update the state\n    //  - arrName : cart or wishlist\n    //  - setDetails : cartDetails or wishlistDetails\n    // const getItemDetails = (arrName, setDetails) => {\n    //     const items = arrName.map(item => item._id)\n    //     const promises = [];\n    //     items.forEach(item => {\n    //         promises.push(\n    //             fetch(`/api/get-item/${item}`)\n    //             .then(res => res.json())\n    //             .then(data => data.data)\n    //         )\n    //     })\n    //     Promise.all(promises).then((result) => setDetails(result))\n    // }\n    /////////////////////////\n\n    // To update cart and/or wishlist\n    const updateUserData = async (obj) => {\n        obj['_id'] = userId;\n        // obj['_id'] = '460d7e55-fab0-48de-9c07-f61b222bfab6';   // <==== This will be removed before submission.  \n        try {\n            const res = await fetch('/api/update-user', {\n                method: 'PATCH', \n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json',\n                },\n                body: JSON.stringify(obj)\n                })\n            const data = await res.json();\n            console.log(data)\n            // To get updated cart and wishlist\n            if(data.status !== 200) return setIsErr(true);\n            data.data.cart && setCart(data.data.cart)\n            data.data.wishList && setWishlist(data.data.wishList)\n        } catch (err) {\n            setIsErr(true)\n        } finally {\n            !isErr && setIsItemsUpdated(true)\n        }\n    }\n\n    // To add an item to cart\n    // This function is passed to Wishlist and ProductDetails component\n    const addItem = (item) => {\n        console.log('ADD TO CART')\n        console.log({cart})\n        setIsItemsUpdated(false)\n        updateUserData({item});\n    }\n\n    let updatedCart = [];\n\n    // To update qty\n    const updateQty = (item) => {\n        console.log('UPDATE QTY')\n        console.log({item})\n        setIsItemsUpdated(false)\n        const index = cart.findIndex(obj => obj._id === item._id)\n        console.log(index)\n        cart.splice(index, 1, item)\n        console.log(\"updated\",cart)\n        updateUserData({cart: [cart]});\n    }\n\n    // To delete an item from cart\n    const deleteItem = (item) => {\n        console.log('DELETE ITEM')\n        console.log({item})\n        setIsItemsUpdated(false)\n        updatedCart =cart.filter(obj => obj._id !== item._id)\n        updateUserData({cart: updatedCart});\n    }\n\n    // To add an item to wishlist and delete it from cart\n    const saveForLater = (item) => {\n        console.log('SAVE FOR LATER')\n        console.log({item})\n        setIsItemsUpdated(false)\n        console.log(cart)\n        const itemAddMovetoWishList = cart.find(obj => obj._id !== item._id)\n        updatedCart = cart.filter(obj => obj._id !== item._id)\n        updateUserData({cart: updatedCart, wishlist: [...wishlist, itemAddMovetoWishList]});\n    }\n\n    // To add an item to wishlist\n    const addToWishlist = (item) => {\n        console.log('ADD TO WISHLIST')\n        console.log({item})\n        console.log(wishlist)\n        setIsItemsUpdated(false)\n        updateUserData({wishList: [...wishlist, item]});\n    }\n\n    let updatedWishlist = [];\n\n    // To delete an item from wishlist\n    const deleteFromWishlist = (item) => {\n        console.log('DELETE FROM WISHLIST')\n        console.log({item})\n        setIsItemsUpdated(false)\n        updatedWishlist = wishlist.filter(obj => obj._id !== item._id)\n        updateUserData({wishlist: updatedWishlist});\n    }\n\n    // To add an item to cart and remove it from wishlist\n    const moveToCart = (item) => {\n        console.log('MOVE TO CART')\n        console.log({item})\n        setIsItemsUpdated(false)\n        updatedWishlist = wishlist.filter(obj => obj._id !== item._id)\n        updateUserData({cart:[...cart, item] ,wishlist : updatedWishlist})\n    }\n\n    return (\n        <UserActionContext.Provider \n            value={{deleteItem, \n                    addItem, \n                    updateQty,\n                    saveForLater, \n                    addToWishlist, \n                    deleteFromWishlist, \n                    moveToCart,\n                    // getItemDetails,\n                    cart, \n                    cartDetails,\n                    setCartDetails,\n                    wishlist,\n                    wishlistDetails,\n                    setWishlistDetails,\n                    }}\n                    >\n            {children}\n        </UserActionContext.Provider>\n    );\n};"]},"metadata":{},"sourceType":"module"}