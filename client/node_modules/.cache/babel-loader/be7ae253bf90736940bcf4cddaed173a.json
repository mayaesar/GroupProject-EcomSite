{"ast":null,"code":"var _jsxFileName = \"/Users/mayaesar/Documents/concordia-bootcamps/Projects/project-GROUP-e-commerce/client/src/components/UserActionContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useContext } from \"react\";\nimport { UserContext } from \"./UserContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserActionContext = /*#__PURE__*/createContext(null);\nexport const UserActionProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const {\n    cart,\n    setCart,\n    wishlist,\n    setWishlist,\n    setIsErr,\n    setIsItemsUpdated,\n    isErr,\n    userId\n  } = useContext(UserContext);\n  const [cartDetails, setCartDetails] = useState(null);\n  const [wishlistDetails, setWishlistDetails] = useState(null); ///////////////////////// We are working change the logic not to do this second fetch to display items in cart and wishlist\n  ///////////////////////// Leave this block until we confirm the site is fully functional with another method.\n  // To get item details of cart or wishlist\n  // This function takes two parameters to update the state\n  //  - arrName : cart or wishlist\n  //  - setDetails : cartDetails or wishlistDetails\n  // const getItemDetails = (arrName, setDetails) => {\n  //     const items = arrName.map(item => item._id)\n  //     const promises = [];\n  //     items.forEach(item => {\n  //         promises.push(\n  //             fetch(`/api/get-item/${item}`)\n  //             .then(res => res.json())\n  //             .then(data => data.data)\n  //         )\n  //     })\n  //     Promise.all(promises).then((result) => setDetails(result))\n  // }\n  /////////////////////////\n  // To update cart and/or wishlist\n\n  const updateUserData = async obj => {\n    obj['_id'] = userId; // obj['_id'] = '460d7e55-fab0-48de-9c07-f61b222bfab6';   // <==== This will be removed before submission.  \n\n    try {\n      const res = await fetch('/api/update-user', {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify(obj)\n      });\n      const data = await res.json();\n      console.log(data); // To get updated cart and wishlist\n\n      if (data.status !== 200) return setIsErr(true);\n      data.data && setCart(data.data);\n      data.data.wishList && setWishlist(data.data.wishList);\n    } catch (err) {\n      setIsErr(true);\n    } finally {\n      !isErr && setIsItemsUpdated(true);\n    }\n  }; // To add an item to cart\n  // This function is passed to Wishlist and ProductDetails component\n\n\n  const addItem = item => {\n    console.log('ADD TO CART');\n    console.log({\n      cart\n    });\n    setIsItemsUpdated(false);\n    updateUserData({\n      cart: item\n    });\n  };\n\n  let updatedCart = []; // To update qty\n\n  const updateQty = item => {// console.log(\"UPDATE QTY\");\n    // console.log({ item });\n    // setIsItemsUpdated(false);\n    // const index = cart.findIndex((obj) => obj._id === item._id);\n    // console.log(index);\n    // cart.splice(index, 1, item);\n    // console.log(\"updated\", cart);\n    // updateUserData({ cart: [cart] });\n  }; // To delete an item from cart\n\n\n  const deleteItem = item => {\n    console.log('DELETE ITEM');\n    console.log({\n      item\n    });\n    setIsItemsUpdated(false);\n    updatedCart = cart.find(obj => obj._id === item._id);\n    updateUserData({\n      cartD: updatedCart\n    });\n  }; // To add an item to wishlist and delete it from cart\n  //this function is a strech \n\n\n  const saveForLater = item => {// console.log('SAVE FOR LATER')\n    // console.log({item})\n    // setIsItemsUpdated(false)\n    // console.log(cart)\n    // const itemAddMovetoWishList = cart.find(obj => obj._id !== item._id)\n    // updatedCart = cart.filter(obj => obj._id !== item._id)\n    // updateUserData({cart: updatedCart, wishList: [...wishlist, itemAddMovetoWishList]});\n  }; //this function is a strech \n  // To add an item to wishlist\n\n\n  const addToWishlist = item => {// console.log(\"ADD TO WISHLIST\");\n    // console.log({ item });\n    // console.log(wishlist);\n    // setIsItemsUpdated(false);\n    // updateUserData({ wishList: [...wishlist, item] });\n  };\n\n  let updatedWishlist = []; //this function is a strech \n  // To delete an item from wishlist\n\n  const deleteFromWishlist = item => {// console.log(\"DELETE FROM WISHLIST\");\n    // console.log({ item });\n    // setIsItemsUpdated(false);\n    // updatedWishlist = wishlist.filter((obj) => obj._id !== item._id);\n    // updateUserData({ wishlist: updatedWishlist });\n  }; //this function is a strech \n  // To add an item to cart and remove it from wishlist\n\n\n  const moveToCart = item => {// console.log(\"MOVE TO CART\");\n    // console.log({ item });\n    // setIsItemsUpdated(false);\n    // updatedWishlist = wishlist.filter((obj) => obj._id !== item._id);\n    // updateUserData({ cart: [...cart, item], wishlist: updatedWishlist });\n  };\n\n  return /*#__PURE__*/_jsxDEV(UserActionContext.Provider, {\n    value: {\n      deleteItem,\n      addItem,\n      updateQty,\n      saveForLater,\n      addToWishlist,\n      deleteFromWishlist,\n      moveToCart,\n      // getItemDetails,\n      cart,\n      cartDetails,\n      setCartDetails,\n      wishlist,\n      wishlistDetails,\n      setWishlistDetails\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n};\n\n_s(UserActionProvider, \"NhRrcTMsEvSMfOc9zVsXV7eJQ3M=\");\n\n_c = UserActionProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserActionProvider\");","map":{"version":3,"sources":["/Users/mayaesar/Documents/concordia-bootcamps/Projects/project-GROUP-e-commerce/client/src/components/UserActionContext.js"],"names":["createContext","useState","useContext","UserContext","UserActionContext","UserActionProvider","children","cart","setCart","wishlist","setWishlist","setIsErr","setIsItemsUpdated","isErr","userId","cartDetails","setCartDetails","wishlistDetails","setWishlistDetails","updateUserData","obj","res","fetch","method","headers","body","JSON","stringify","data","json","console","log","status","wishList","err","addItem","item","updatedCart","updateQty","deleteItem","find","_id","cartD","saveForLater","addToWishlist","updatedWishlist","deleteFromWishlist","moveToCart"],"mappings":"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","sourcesContent":["import { createContext, useState, useContext } from \"react\";\nimport { UserContext } from \"./UserContext\";\n\nexport const UserActionContext = createContext(null);\n\nexport const UserActionProvider = ({ children }) => {\n  const {\n    cart,\n    setCart,\n    wishlist,\n    setWishlist,\n    setIsErr,\n    setIsItemsUpdated,\n    isErr,\n    userId,\n  } = useContext(UserContext);\n  const [cartDetails, setCartDetails] = useState(null);\n  const [wishlistDetails, setWishlistDetails] = useState(null);\n\n  ///////////////////////// We are working change the logic not to do this second fetch to display items in cart and wishlist\n  ///////////////////////// Leave this block until we confirm the site is fully functional with another method.\n  // To get item details of cart or wishlist\n  // This function takes two parameters to update the state\n  //  - arrName : cart or wishlist\n  //  - setDetails : cartDetails or wishlistDetails\n  // const getItemDetails = (arrName, setDetails) => {\n  //     const items = arrName.map(item => item._id)\n  //     const promises = [];\n  //     items.forEach(item => {\n  //         promises.push(\n  //             fetch(`/api/get-item/${item}`)\n  //             .then(res => res.json())\n  //             .then(data => data.data)\n  //         )\n  //     })\n  //     Promise.all(promises).then((result) => setDetails(result))\n  // }\n  /////////////////////////\n\n\n    // To update cart and/or wishlist\n    const updateUserData = async (obj) => {\n        obj['_id'] = userId;\n        // obj['_id'] = '460d7e55-fab0-48de-9c07-f61b222bfab6';   // <==== This will be removed before submission.  \n        try {\n            const res = await fetch('/api/update-user', {\n                method: 'PATCH', \n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json',\n                },\n                body: JSON.stringify(obj)\n                })\n            const data = await res.json();\n            console.log(data)\n            // To get updated cart and wishlist\n            if(data.status !== 200) return setIsErr(true);\n            data.data && setCart(data.data)\n            data.data.wishList && setWishlist(data.data.wishList)\n        } catch (err) {\n            setIsErr(true)\n        } finally {\n            !isErr && setIsItemsUpdated(true)\n        }\n\n\n    }\n  \n\n\n    // To add an item to cart\n    // This function is passed to Wishlist and ProductDetails component\n    const addItem = (item) => {\n        console.log('ADD TO CART')\n        console.log({cart})\n        setIsItemsUpdated(false)\n        updateUserData({cart:item});\n    }\n\n\n  let updatedCart = [];\n\n  // To update qty\n  const updateQty = (item) => {\n    // console.log(\"UPDATE QTY\");\n    // console.log({ item });\n    // setIsItemsUpdated(false);\n    // const index = cart.findIndex((obj) => obj._id === item._id);\n    // console.log(index);\n    // cart.splice(index, 1, item);\n    // console.log(\"updated\", cart);\n    // updateUserData({ cart: [cart] });\n  };\n\n\n    // To delete an item from cart\n    const deleteItem = (item) => {\n        console.log('DELETE ITEM')\n        console.log({item})\n        setIsItemsUpdated(false)\n        updatedCart =cart.find(obj => obj._id === item._id)\n        updateUserData({cartD: updatedCart});\n    }\n\n    // To add an item to wishlist and delete it from cart\n    //this function is a strech \n    const saveForLater = (item) => {\n        // console.log('SAVE FOR LATER')\n        // console.log({item})\n        // setIsItemsUpdated(false)\n        // console.log(cart)\n        // const itemAddMovetoWishList = cart.find(obj => obj._id !== item._id)\n        // updatedCart = cart.filter(obj => obj._id !== item._id)\n        // updateUserData({cart: updatedCart, wishList: [...wishlist, itemAddMovetoWishList]});\n    }\n\n//this function is a strech \n  // To add an item to wishlist\n  const addToWishlist = (item) => {\n    // console.log(\"ADD TO WISHLIST\");\n    // console.log({ item });\n    // console.log(wishlist);\n    // setIsItemsUpdated(false);\n    // updateUserData({ wishList: [...wishlist, item] });\n  };\n\n  let updatedWishlist = [];\n//this function is a strech \n  // To delete an item from wishlist\n  const deleteFromWishlist = (item) => {\n    // console.log(\"DELETE FROM WISHLIST\");\n    // console.log({ item });\n    // setIsItemsUpdated(false);\n    // updatedWishlist = wishlist.filter((obj) => obj._id !== item._id);\n    // updateUserData({ wishlist: updatedWishlist });\n  };\n\n  //this function is a strech \n  // To add an item to cart and remove it from wishlist\n  const moveToCart = (item) => {\n    // console.log(\"MOVE TO CART\");\n    // console.log({ item });\n    // setIsItemsUpdated(false);\n    // updatedWishlist = wishlist.filter((obj) => obj._id !== item._id);\n    // updateUserData({ cart: [...cart, item], wishlist: updatedWishlist });\n  };\n\n  return (\n    <UserActionContext.Provider\n      value={{\n        deleteItem,\n        addItem,\n        updateQty,\n        saveForLater,\n        addToWishlist,\n        deleteFromWishlist,\n        moveToCart,\n        // getItemDetails,\n        cart,\n        cartDetails,\n        setCartDetails,\n        wishlist,\n        wishlistDetails,\n        setWishlistDetails,\n      }}\n    >\n      {children}\n    </UserActionContext.Provider>\n  );\n};\n\n"]},"metadata":{},"sourceType":"module"}